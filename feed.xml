<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://younghch.github.io/</id><title>Younghch</title><subtitle>개발, 알고리즘, 도커, 쿠버네티스</subtitle> <updated>2023-09-03T21:31:22+09:00</updated> <author> <name>Younghoun Cho</name> <uri>https://younghch.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://younghch.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="kr" href="https://younghch.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2023 Younghoun Cho </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>DDD 사이드 프로젝트에 적용해보기(1)</title><link href="https://younghch.github.io/posts/apply-ddd-to-project/" rel="alternate" type="text/html" title="DDD 사이드 프로젝트에 적용해보기(1)" /><published>2023-09-02T22:00:00+09:00</published> <updated>2023-09-03T21:30:47+09:00</updated> <id>https://younghch.github.io/posts/apply-ddd-to-project/</id> <content src="https://younghch.github.io/posts/apply-ddd-to-project/" /> <author> <name>Younghoun Cho</name> </author> <category term="아키텍쳐" /> <summary> 사이드 프로젝트를 진행하면서 Implementing Domain-Driven Design을 읽고 있었다. 내용이 너무 커서 책을 읽는 속도가 프로젝트 진행속도에 따라가지 못했다. 이에 같은 저자의 가벼운 Domain-Driven Desiong Distlled를 읽고 프로젝트에 적용해보려고 한다. 바운디드 컨텍스트 정의 우리 프로젝트는 헬스 기록을 등록하면 랭킹을 보여주는 앱이다. 현재 정의된 기능을 간단하게 나열하면 다음과 같다. 3대 측정 기록 등록 측정 기록 인증 3대 측정 순위 표출 주위 헬스장 안내 헬스장 기구 정보/리뷰 표시 회원 가입 / 로그인 회원 정보 수정 Ranking, Gym, User 이렇게 세개의 바운디드 컨텍스트로 ... </summary> </entry> <entry><title>어디서 토큰을 인증할 것인가?</title><link href="https://younghch.github.io/posts/where-to-verify-a-user/" rel="alternate" type="text/html" title="어디서 토큰을 인증할 것인가?" /><published>2023-08-06T17:30:00+09:00</published> <updated>2023-08-06T17:44:34+09:00</updated> <id>https://younghch.github.io/posts/where-to-verify-a-user/</id> <content src="https://younghch.github.io/posts/where-to-verify-a-user/" /> <author> <name>Younghoun Cho</name> </author> <category term="인증" /> <summary> 문제 상황 JWT을 사용하면 인증서버의 퍼블릭 키로 토큰을 검증 할 수 있다. 인증 코드 구현은 어렵지 않다. 하지만 모든 서버에 이 기능이 각각 추가되면 코드의 응집도를 떨어트린다. 인증서버와의 불필요한 통신이 없으면서 인증을 한곳에 응집시킬 방법은 어떤게 있을까? 환경 AWS 내 EKS사용 없이 직접 구성한 K8s 클러스터. 현재 Spring Boot 서버만 있지만 다른 종류 서버가 들어올 수 있음. 프런트는 Vite에 static website를 배포 방법 AWS API Gateway + Lambda authorizer API Gateway를 사용하면서 AWS Lambda를 사용해 토큰을 검증하고 인증된 트래픽만 벡앤드로 보낼 수 있다. aws 프리티어가 100만 r... </summary> </entry> <entry><title>OAuth2.0</title><link href="https://younghch.github.io/posts/OAuth2.0/" rel="alternate" type="text/html" title="OAuth2.0" /><published>2023-07-24T23:40:00+09:00</published> <updated>2023-08-06T11:33:15+09:00</updated> <id>https://younghch.github.io/posts/OAuth2.0/</id> <content src="https://younghch.github.io/posts/OAuth2.0/" /> <author> <name>Younghoun Cho</name> </author> <category term="인증" /> <summary> 프로젝트에서 구글, 카카오 연동이 필요해 OAuth에 대해 공부했다. 유저 아이디만 필요했기에 OAuth가 아닌 OpenId Connect가 필요한게 맞는 것 같다. OAuth에 대해 공부한 내용을 아래 정리한다. OAuth란 무엇인가 OAuth는 ‘Open standard for acess delegation’의 축약이다. 사용자가 가입된 서비스의 정보에 다른 서비스의 접근을 허용할 때, 직접 아이디와 패스워드를 타 서비스에 넘길 필요 없이 안전하게 권한을 부여하는 방식을 정의한 프토토콜이다. OAuth 용어 정리 client: 유저의 정보에 접근하고 싶은 서버이다. resource owner: client가 접근하고 싶은 정보의 주인, 일반적으로 유저이다. authorization ser... </summary> </entry> <entry><title>Context Switch</title><link href="https://younghch.github.io/posts/context-switch/" rel="alternate" type="text/html" title="Context Switch" /><published>2022-05-03T18:00:00+09:00</published> <updated>2022-05-04T04:24:30+09:00</updated> <id>https://younghch.github.io/posts/context-switch/</id> <content src="https://younghch.github.io/posts/context-switch/" /> <author> <name>Younghoun Cho</name> </author> <category term="운영체제" /> <summary> 프로세스가 cpu에서 실행되고 있을 때, OS는 실행되지 않는다. 그러면 어떻게 OS가 실행중인 프로세스를 다른 프로세스로 전환할까? Timer interrupt 프로세스에서 system call을 호출할때까지 기다려 OS가 컨트롤을 되찾을 수도 있지만, 프로그램이 무한 루프에 빠진다면 이를 되찾을 방법은 없다. 이에 하드웨어에서 타이머를 설정하고 특정 주기로 인터럽트를 발생시켜 OS를 호출한다. Context switch timeline OS(kernel mode) Hardware Program(user mode) boot     Initialize trap ... </summary> </entry> <entry><title>System call</title><link href="https://younghch.github.io/posts/system-call/" rel="alternate" type="text/html" title="System call" /><published>2022-05-03T14:00:00+09:00</published> <updated>2022-05-03T14:00:00+09:00</updated> <id>https://younghch.github.io/posts/system-call/</id> <content src="https://younghch.github.io/posts/system-call/" /> <author> <name>Younghoun Cho</name> </author> <category term="운영체제" /> <summary> 무엇을 공부해할지 오래 헤맸다. 주니어인 지금 운영체제, 네트워크, 데이터베이스 이론을 제대로 공부하면 앞으로의 개발이 편해질 것이란 결론이 나왔다. 우선 Operating Systems: Three Easy Pieces를 보며 공부하는 중이다. (과제 깃) What is System Call? cpu는 두가지 processor mode를 가진다. OS가 컨트롤을 가지는 kernel mode에서는 기능이 제한되지 않지만 프로세스가 실행되는 user mode에서는 보안을 위해 시스템에 영향을 줄 수 있는 기능이 제한된다. user mode에서도 제한된 기능을 사용할 수 있도록 제공되는 기능이 system call이다. 즉 프로세스가 OS에 컨트롤을 넘기고 결과를 돌려받는 것이다. Trap, Trap... </summary> </entry> </feed>
